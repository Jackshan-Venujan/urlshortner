---
- name: URL Shortener Deployment
  hosts: all
  become: yes
  vars:
    docker_compose_version: "1.29.2"
    server_image: "{{ server_image | default('venujan/urlshortner-server:latest') }}"
    client_image: "{{ client_image | default('venujan/urlshortner-client:latest') }}"
    app_dir: "/opt/urlshortner"
  
  tasks:
    # OS detection
    - name: Detect OS
      command: cat /etc/os-release
      register: os_release
      changed_when: false
    
    - name: Set OS facts
      set_fact:
        is_ubuntu: "{{ 'Ubuntu' in os_release.stdout }}"
        is_debian: "{{ ansible_os_family == 'Debian' if ansible_os_family is defined else false }}"
        is_amazon_linux: "{{ 'Amazon Linux' in os_release.stdout }}"
    
    - name: Debug OS detection
      debug:
        msg: "Detected OS: {{ 'Ubuntu' if is_ubuntu else 'Amazon Linux' if is_amazon_linux else ansible_os_family | default('Unknown') }}"

    # Package management for Debian/Ubuntu
    - name: Update apt cache (Debian/Ubuntu)
      apt:
        update_cache: yes
      when: is_debian or is_ubuntu
      
    - name: Install required packages (Debian/Ubuntu)
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - git
        state: present
      when: is_debian or is_ubuntu

    # Docker installation for Debian/Ubuntu
    - name: Add Docker GPG key (Debian/Ubuntu)
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      when: is_debian or is_ubuntu

    - name: Add Docker repository (Debian/Ubuntu)
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        state: present
      when: is_debian or is_ubuntu

    - name: Install Docker (Debian/Ubuntu)
      apt:
        name: docker-ce
        state: present
      when: is_debian or is_ubuntu
      
    # Package management for Amazon Linux
    - name: Update yum cache (Amazon Linux)
      command: yum makecache
      changed_when: false
      when: is_amazon_linux

    - name: Install Docker (Amazon Linux)
      command: amazon-linux-extras install docker -y
      when: is_amazon_linux
      
    - name: Install Python and Git (Amazon Linux)
      command: yum install -y python3-pip git
      when: is_amazon_linux

    # Common Docker setup
    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: Install Docker Compose
      get_url:
        url: https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-Linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: '0755'

    - name: Create app directory
      file:
        path: "{{ app_dir }}"
        state: directory
        mode: '0755'

    - name: Copy Docker Compose template
      template:
        src: ../templates/docker-compose.yml.j2
        dest: "{{ app_dir }}/docker-compose.yml"
        mode: '0644'

    - name: Pull Docker images
      command: docker pull {{ item }}
      loop:
        - "{{ server_image }}"
        - "{{ client_image }}"
        - "mongo:latest"
      changed_when: true

    - name: Start Docker Compose services
      command: docker-compose up -d
      args:
        chdir: "{{ app_dir }}"
      changed_when: true

    - name: Wait for services to be healthy
      pause:
        seconds: 30
      changed_when: false

    - name: Check container status
      command: docker ps -a
      register: container_status
      changed_when: false

    - name: Display container status
      debug:
        var: container_status.stdout_lines

    - name: Clean up old Docker images
      shell: "docker image prune -af"